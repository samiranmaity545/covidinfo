{"version":3,"sources":["serviceWorker.js","info-card/Info-card.js","info/Info.js","index.js"],"names":["Boolean","window","location","hostname","match","InfoCard","className","Card","this","props","colorName","Header","as","name","Body","Title","Text","info","Component","Info","state","stats","fetch","then","response","json","jsonData","dcount","statewise","setState","catch","error","console","arrayavaratcard","map","avatarcard","i","key","Accordion","Toggle","eventKey","lastupdatedtime","Collapse","active","confirmed","deaths","recovered","defaultActiveKey","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2DCISC,E,uKAfP,OACI,yBAAKC,UAAU,UACX,kBAACC,EAAA,EAAD,CAAMD,UAAW,kBAAoBE,KAAKC,MAAMC,WAC5C,kBAACH,EAAA,EAAKI,OAAN,CAAaC,GAAG,MAAMJ,KAAKC,MAAMI,MAC7B,kBAACN,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,MAAN,CAAYT,UAAU,gBACtB,kBAACC,EAAA,EAAKS,KAAN,CAAWV,UAAU,0BACpBE,KAAKC,MAAMQ,a,GATjBC,aCyERC,E,kDAvEX,aACD,IAAD,8BACE,gBACKC,MAAM,CACTC,MAAO,IAHX,E,gEAOC,IAAD,OACEC,MAAM,0CAA0CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAACG,GAExF,IAAMC,EAASD,EAASE,UAIlB,EAAKC,SAAS,CACZR,MAAMM,OAIbG,OAAM,SAACC,GACRC,QAAQD,MAAMA,Q,+BAKL,IACGV,EAAUb,KAAKY,MAAfC,MAaFY,EAAkBZ,GAASA,EAAMa,KAAK,SAACC,EAAYC,GAErD,OAAO,kBAAC7B,EAAA,EAAD,CAAM8B,IAAKD,GACV,kBAACE,EAAA,EAAUC,OAAX,CAAkB3B,GAAIL,IAAKI,OAAQL,UAAU,WAAWkC,SAAUJ,GAClE,wBAAI9B,UAAU,eAAd,IAA6B,gCAAS6B,EAAWf,MAApB,KAA7B,IAAkE,wCAAce,EAAWM,mBAE3F,kBAACH,EAAA,EAAUI,SAAX,CAAoBF,SAAUJ,GAC5B,kBAAC7B,EAAA,EAAKO,KAAN,KACA,yBAAKR,UAAU,OACX,kBAAC,EAAD,CAAUO,KAAK,SAASI,KAAMkB,EAAWQ,OAAQjC,UAAU,YAC3D,kBAAC,EAAD,CAAUG,KAAK,YAAYI,KAAMkB,EAAWS,UAAWlC,UAAU,eACjE,kBAAC,EAAD,CAAUG,KAAK,SAASI,KAAMkB,EAAWU,OAAQnC,UAAU,eAC3D,kBAAC,EAAD,CAAUG,KAAK,YAAYI,KAAMkB,EAAWW,UAAWpC,UAAU,sBAOnF,OACI,yBAAKJ,UAAU,mBACX,wBAAIA,UAAU,oBAAd,kBACA,wBAAIA,UAAU,oBAAd,kBACA,kBAACgC,EAAA,EAAD,CAAWhC,UAAU,OAAQyC,iBAxBzB,GAyBAd,Q,GAjEDf,a,YCCnB8B,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SH4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0B,c","file":"static/js/main.ac6e3739.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import { Button } from 'react-bootstrap';\r\nimport { Card } from 'react-bootstrap';\r\n\r\nclass InfoCard extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"col-sm\">\r\n                <Card className={\"info-card mb-2 \" + this.props.colorName}>\r\n                    <Card.Header as=\"h5\">{this.props.name}</Card.Header>\r\n                        <Card.Body>\r\n                            <Card.Title className=\"text-center\"></Card.Title>\r\n                            <Card.Text className=\"text-light text-center\">\r\n                            {this.props.info}\r\n                            </Card.Text>\r\n                        </Card.Body>\r\n                </Card>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default InfoCard;","import React, { Component } from 'react';\r\n// import ReactDOM from 'react-dom';\r\nimport './Info.scss';\r\nimport { Card, Accordion } from 'react-bootstrap';\r\nimport InfoCard from '../info-card/Info-card'\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nclass Info extends Component {\r\n    constructor()\r\n  {\r\n    super();\r\n    this.state={\r\n      stats: [],\r\n    }\r\n  }\r\n  componentDidMount()\r\n  {\r\n    fetch('https://api.covid19india.org/data.json').then(response => response.json()).then((jsonData) => {\r\n    //console.log(jsonData.statewise);\r\n    const dcount = jsonData.statewise;\r\n    \r\n    //const i = 1;\r\n    //console.log(dcount);\r\n          this.setState({\r\n            stats:dcount,\r\n          })\r\n      //console.log(this.state.active);\r\n\r\n  }).catch((error) => {\r\n    console.error(error)\r\n  })\r\n  }\r\n\r\n\r\n    render(){\r\n        const { stats } = this.state;\r\n        // const arrayavaratcard = dcount.map( (avatarcard, i) => {\r\n        //     return <div key={i}>\r\n        //             <h3 className=\"bg-warning p-2 rounded\"> <strong>{this.state.state} </strong> <span className=\"float-right\">As on: {this.state.lastupdatedtime}</span></h3>\r\n        //             <div className=\"row\">\r\n        //                 <InfoCard name=\"Active\" info={this.state.active} colorName=\"bg-info\"  />\r\n        //                 <InfoCard name=\"Confirmed\" info={this.state.confirmed} colorName=\"bg-warning\" />\r\n        //                 <InfoCard name=\"Deaths\" info={this.state.deaths} colorName=\"bg-danger \"/>\r\n        //                 <InfoCard name=\"Recovered\" info={this.state.recovered} colorName=\"bg-success\"/>\r\n        //             </div>\r\n        //         </div>\r\n        // })\r\n        const dak = 0;\r\n        const arrayavaratcard = stats && stats.map( (avatarcard, i) => {\r\n            //console.log(i);\r\n            return <Card key={i}>\r\n                    <Accordion.Toggle as={Card.Header} className=\"acc-head\" eventKey={i}>\r\n                    <h3 className=\"p-2 rounded\"> <strong>{avatarcard.state} </strong> <span>As on: {avatarcard.lastupdatedtime}</span></h3>\r\n                    </Accordion.Toggle>\r\n                    <Accordion.Collapse eventKey={i}>\r\n                      <Card.Body>\r\n                      <div className=\"row\">\r\n                          <InfoCard name=\"Active\" info={avatarcard.active} colorName=\"bg-info\"  />\r\n                          <InfoCard name=\"Confirmed\" info={avatarcard.confirmed} colorName=\"bg-warning\" />\r\n                          <InfoCard name=\"Deaths\" info={avatarcard.deaths} colorName=\"bg-danger \"/>\r\n                          <InfoCard name=\"Recovered\" info={avatarcard.recovered} colorName=\"bg-success\"/>\r\n                      </div>\r\n                      </Card.Body>\r\n                    </Accordion.Collapse>\r\n                </Card>\r\n                \r\n        })\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <h1 className=\"text-center pt-3\">COVID-19 INDIA</h1>\r\n                <h5 className=\"text-center mb-5\">Cases overview</h5>\r\n                <Accordion className=\"mb-3\"  defaultActiveKey={dak}>\r\n                   {arrayavaratcard}\r\n                </Accordion>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default Info;","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Info from './info/Info';\nimport './ui-lib/icons/style.scss';\nimport './index.scss';\nReactDOM.render(<Info />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}